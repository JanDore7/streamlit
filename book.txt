pip install streamlit - установим 

sl.experimental_rerun() - перезапустить

https://www.markdownguide.org - для sl.markdown()
https://katex.org - для latex

При обрашении к калссу если есть пробел , заменяем его точкой
st-emotion-cache-6q9sum ef3psqc4
st-emotion-cache-6q9sum.ef3psqc4
!important - повышает приоритет



Функция sl.radio принимает несколько аргументов, самые основные из них:

    label (строка): Обязательный аргумент, задающий текстовую метку для виджета радиокнопок.
    options (список/кортеж): Обязательный аргумент, содержащий перечень вариантов для выбора. Элементы списка могут быть строками, числами или любыми другими объектами. Если используются нестроковые объекты, Streamlit автоматически преобразует их в строки для отображения.
    index (целое число): Необязательный аргумент, задающий индекс элемента из options, который будет выбран по умолчанию. По умолчанию index=0, т.е., первый элемент списка будет выбран.
    format_func (функция): Необязательный аргумент, позволяющий указать функцию форматирования для отображения элементов списка. Это может быть полезно, если, например, в options используются объекты, и вы хотите контролировать, как именно они будут представлены пользователю.
    key (строка): Необязательный аргумент, уникальный идентификатор виджета. Если вы хотите в будущем обращаться к значению виджета или используете несколько виджетов в одном приложении, key поможет отличить один виджет от другого.
    help (строка): Необязательный аргумент, предоставляющий текст справки, который будет отображаться, когда пользователь наводит курсор на вопросительный знак рядом с радиокнопкой.
    on_change и args/kwargs: Аргументы для callback-функций, которые вызываются при изменении выбранного значения.




    sl.button() в Streamlit – это функция, создающая кнопку на пользовательском интерфейсе. Когда пользователь нажимает на эту кнопку, она может инициировать определённое действие или процесс в вашем приложении. Это один из самых базовых и важных элементов управления в любом веб-приложении.
Основные аргументы функции sl.button:

    label (строка): Этот обязательный аргумент определяет текст, который будет отображаться на кнопке.

    key (строка): Необязательный аргумент, представляющий уникальный идентификатор кнопки в пределах приложения. Это полезно, если у вас есть несколько кнопок и вам нужно различать, какая из них была нажата.

    help (строка): Необязательный аргумент, который предоставляет текст справки. Этот текст появляется в виде всплывающей подсказки, когда пользователь наводит курсор мыши на кнопку.

    on_click (функция): Необязательный аргумент, в который передается функция, вызываемая при нажатии на кнопку. Это позволяет связать определённое действие с кнопкой без необходимости проверять её состояние в основном теле программы.

    args и kwargs (список и словарь): Необязательные аргументы, которые передаются в функцию on_click. Они могут быть использованы для передачи дополнительных параметров в функцию обратного вызова.

Пример использования sl.button:

python

import streamlit as st

def button_clicked():
    st.write("Кнопка была нажата!")

st.header("Пример кнопки")

# Создание кнопки
if st.button('Нажми меня', help="Нажмите кнопку, чтобы выполнить действие"):
    button_clicked()

В этом примере создается кнопка с текстом "Нажми меня". Когда пользователь нажимает на эту кнопку, вызывается функция button_clicked, которая выводит сообщение "Кнопка была нажата!".

Кнопки могут использоваться для самых разных целей в Streamlit-приложениях, включая инициацию обработки данных, обновление отображаемой информации, запуск вычислительных задач и многое другое.








sl.selectbox в Streamlit это функция, которая создаёт выпадающий список (select box), из которого пользователь может выбрать один из предложенных вариантов. Этот элемент интерфейса полезен, когда нужно предоставить пользователю список опций для выбора без занимания много места на экране.
Основное использование:

python

import streamlit as st

# Определение списка опций
options = ["Option 1", "Option 2", "Option 3"]

# Создание select box
selected_option = st.selectbox("Choose an option", options)

# Отображение выбранного варианта
st.write(f"You selected: {selected_option}")

Аргументы st.selectbox:

    label (str): Текстовая метка, отображаемая над select box.
    options (list, tuple, numpy.ndarray, pandas.Series, и другие): Последовательность опций, из которых пользователь может выбрать. Элементы в этой последовательности будут преобразованы в строки.
    index (int): Индекс выбранного по умолчанию элемента из списка options. По умолчанию равен 0.
    format_func (Callable): Функция форматирования для отображения элементов списка. Это позволяет настроить, как будут представлены опции в выпадающем списке. Например, можно отобразить более понятные пользователю названия.
    key (str): Уникальный ключ для виджета, который можно использовать для отслеживания его состояния в сессии.
    help (str): Текст справки, отображаемый при наведении курсора на информационный значок рядом с виджетом.
    on_change (Callable): Функция, вызываемая при изменении выбора.
    args (List[Any]): Аргументы, передаваемые в on_change.
    kwargs (Dict[Any, Any]): Именованные аргументы, передаваемые в on_change.

Пример с format_func:

python

import streamlit as st

def format_func(option):
    return f"{option.upper()} - Custom format"

options = ["Option 1", "Option 2", "Option 3"]
selected_option = st.selectbox(
    "Choose an option",
    options,
    format_func=format_func
)

st.write(f"You selected: {selected_option}")

В этом примере каждая опция будет отображаться в верхнем регистре с добавлением "- Custom format" благодаря функции format_func.







sl.multiselect в Streamlit — это виджет, позволяющий пользователям выбирать несколько опций из выпадающего списка. Это особенно полезно, когда требуется предоставить возможность выбора из множества вариантов без ограничения одним выбором.
Основное использование:

python

import streamlit as st

# Определение списка опций
options = ["Option 1", "Option 2", "Option 3", "Option 4"]

# Создание multiselect box
selected_options = st.multiselect("Choose your options", options)

# Отображение выбранных вариантов
st.write(f"You selected: {selected_options}")

Аргументы st.multiselect:

    label (str): Текстовая метка, отображаемая над multiselect box.
    options (list, tuple, numpy.ndarray, pandas.Series, и другие): Последовательность опций, из которых пользователь может выбирать. Элементы в этой последовательности будут преобразованы в строки.
    default (list, tuple): Список индексов или значений, которые будут выбраны по умолчанию. Если опции переданы в виде значений, то они должны точно соответствовать элементам в options.
    format_func (Callable): Функция форматирования для отображения элементов списка. Это позволяет настроить, как будут представлены опции в выпадающем списке.
    key (str): Уникальный ключ для виджета, который можно использовать для отслеживания его состояния в сессии.
    help (str): Текст справки, отображаемый при наведении курсора на информационный значок рядом с виджетом.
    on_change (Callable): Функция, вызываемая при изменении выбора.
    args (List[Any]): Аргументы, передаваемые в on_change.
    kwargs (Dict[Any, Any]): Именованные аргументы, передаваемые в on_change.
    disabled (bool): Если True, выбор будет недоступен для взаимодействия с пользователем.

Пример с выбором по умолчанию и format_func:

python

import streamlit as st

def format_func(option):
    return f"{option} - Customized"

options = ["Option 1", "Option 2", "Option 3", "Option 4"]
selected_options = st.multiselect(
    "Choose your options",
    options,
    default=["Option 2", "Option 3"],
    format_func=format_func
)

st.write(f"You selected: {', '.join(selected_options)}")

В этом примере Option 2 и Option 3 выбраны по умолчанию, и каждая опция отображается с добавлением "- Customized" благодаря функции format_func





sl.file_uploader в Streamlit - это виджет, который позволяет пользователям загружать файлы с их компьютера непосредственно в ваше приложение Streamlit.
Основное использование:

python

import streamlit as st

# Создание виджета загрузчика файла
uploaded_file = st.file_uploader("Загрузите файл", type=['txt', 'csv', 'pdf', 'mp4'])

# Проверка, был ли файл загружен
if uploaded_file is not None:
    # Ваш код для работы с загруженным файлом
    st.write("Файл был успешно загружен!")

Аргументы st.file_uploader:

    label (str): Текстовая метка, отображаемая над кнопкой загрузки файла.

    type (str или список): Необязательный аргумент. Ограничивает типы файлов, которые пользователь может загрузить. Это может быть строка с расширением файла (например, "txt"), список расширений файлов (например, ["txt", "csv"]) или None, если вы хотите разрешить загрузку любых типов файлов.

    accept_multiple_files (bool): Необязательный аргумент. Если установлен в True, пользователь сможет загрузить несколько файлов за один раз. По умолчанию False.

    key (str): Необязательный аргумент, уникальный идентификатор виджета, который можно использовать для отслеживания его состояния в сессии.

    help (str): Необязательный аргумент, предоставляющий текст справки, который отображается при наведении курсора на информационный значок рядом с виджетом.

Возвращаемое значение:

st.file_uploader возвращает объект загруженного файла (если файл был загружен) или None (если файл не был загружен или загрузка была отменена пользователем).

После загрузки файла вы можете работать с ним так, как вам нужно. Например, вы можете прочитать содержимое файла и отобразить его на странице, выполнить анализ данных, отобразить изображение или видео, и т. д.


sl.slider в Streamlit - это виджет, который позволяет пользователю выбирать значение из некоторого диапазона, перемещая ползунок в графическом интерфейсе.
Основное использование:

python

import streamlit as st

# Создание слайдера
value = st.slider("Выберите значение", min_value=0, max_value=100, value=50, step=1)

# Отображение выбранного значения
st.write("Вы выбрали:", value)

Аргументы st.slider:

    label (str): Текстовая метка, отображаемая над слайдером.

    min_value (int или float): Минимальное значение, которое может быть выбрано на слайдере.

    max_value (int или float): Максимальное значение, которое может быть выбрано на слайдере.

    value (int или float): Начальное значение слайдера. По умолчанию это среднее значение между min_value и max_value.

    step (int или float): Шаг, на который можно изменять значение слайдера. По умолчанию 1 для целочисленных значений и 0.1 для чисел с плавающей запятой.

    format (str): Необязательный аргумент, который определяет формат отображаемого числа. Например, "%.2f" для двух десятичных знаков для чисел с плавающей запятой.

    key (str): Необязательный аргумент, уникальный идентификатор виджета, который можно использовать для отслеживания его состояния в сессии.

    help (str): Необязательный аргумент, предоставляющий текст справки, который отображается при наведении курсора на информационный значок рядом с виджетом.

Возвращаемое значение:

st.slider возвращает выбранное значение. Вы можете сохранить это значение в переменную и использовать его дальше в вашем приложении для выполнения определенных действий в зависимости от выбора пользователя.





Функция select_slider в Streamlit представляет собой виджет, который предоставляет пользователю возможность выбрать значение из некоторого непрерывного диапазона с предопределенными вариантами и перемещением ползунка.

Вот описание её параметров:

    label: Текстовая метка, отображаемая над слайдером.

    options: Последовательность предопределенных вариантов, которые пользователь может выбирать на слайдере.

    value: Начальное значение слайдера. По умолчанию это значение None.

    format_func: Функция форматирования для отображения значений слайдера. По умолчанию используется функция str.

    key: Уникальный идентификатор виджета, который можно использовать для отслеживания его состояния в сессии.

    help: Текст справки, отображаемый при наведении курсора на информационный значок рядом с виджетом.

    on_change: Функция обратного вызова, вызываемая при изменении значения слайдера.

    args: Дополнительные аргументы, передаваемые в функцию обратного вызова on_change.

    kwargs: Именованные аргументы, передаваемые в функцию обратного вызова on_change.

    disabled: Если установлено значение True, слайдер будет заблокирован и недоступен для пользовательского взаимодействия. По умолчанию False.

    label_visibility: Видимость метки. Может быть "visible" (по умолчанию), "collapsed" или "hidden".

Функция select_slider возвращает выбранное значение слайдера.

Пример использования:

python

import streamlit as st

options = range(0, 101, 10)  # Предопределенные варианты от 0 до 100 с шагом 10

selected_value = st.select_slider(
    "Выберите значение:",
    options=options,
    value=50,  # Начальное значение
    format_func=lambda x: f"Value: {x}"  # Форматирование вывода значения
)

st.write("Вы выбрали:", selected_value)

Этот пример создает слайдер с предопределенными вариантами от 0 до 100 с шагом 10 и начальным значением 50. Выбранное значение выводится на экран с помощью st.write.



sl.text_input в Streamlit - это виджет, который позволяет пользователям вводить текст с клавиатуры.
Основное использование:

python

import streamlit as st

# Создание текстового поля для ввода
user_input = st.text_input("Введите текст", "По умолчанию")

# Отображение введенного текста
st.write("Вы ввели:", user_input)

Аргументы st.text_input:

    label (str): Текстовая метка, отображаемая перед текстовым полем ввода.

    value (str): Начальное значение, отображаемое в текстовом поле. По умолчанию это пустая строка.

    max_chars (int): Максимальное количество символов, которое можно ввести в текстовом поле. Если значение превышает это ограничение, текст будет обрезан. По умолчанию нет ограничения.

    key (str): Уникальный ключ для виджета, который можно использовать для отслеживания его состояния в сессии.

    help (str): Текст справки, отображаемый при наведении курсора на информационный значок рядом с виджетом.

Возвращаемое значение:

st.text_input возвращает строку, введенную пользователем в текстовом поле.

В функции st.text_input вы можете указать текстовую метку, которая отображается перед текстовым полем, а также начальное значение по умолчанию. Пользователь может вводить текст в поле, а затем вы можете использовать этот ввод в вашем приложении для дальнейшей обработки или анализа.



sl.text_area в Streamlit - это виджет для ввода многострочного текста.
Основное использование:

python

import streamlit as st

# Создание текстовой области для ввода
user_input = st.text_area("Введите текст", "По умолчанию")

# Отображение введенного текста
st.write("Вы ввели:", user_input)

Аргументы st.text_area:

    label (str): Текстовая метка, отображаемая перед текстовой областью ввода.

    value (str): Начальное значение, отображаемое в текстовой области. По умолчанию это пустая строка.

    height (int): Высота текстовой области в пикселях. По умолчанию высота автоматически регулируется в зависимости от содержимого.

    max_chars (int): Максимальное количество символов, которое можно ввести в текстовой области. Если значение превышает это ограничение, текст будет обрезан. По умолчанию нет ограничения.

    key (str): Уникальный ключ для виджета, который можно использовать для отслеживания его состояния в сессии.

    help (str): Текст справки, отображаемый при наведении курсора на информационный значок рядом с виджетом.

Возвращаемое значение:

st.text_area возвращает строку, введенную пользователем в текстовую область.

Этот виджет позволяет пользователям вводить многострочный текст. По умолчанию размер текстовой области автоматически регулируется в зависимости от содержимого, но вы также можете установить определенную высоту с помощью аргумента height. Введенный текст можно использовать в вашем приложении для дальнейшей обработки или анализа.




sl.progress в Streamlit - это виджет, который отображает индикатор выполнения, позволяя вам визуально отслеживать прогресс операции.
Основное использование:

python

import streamlit as st
import time

# Отображение индикатора выполнения
progress_bar = st.progress(0)

# Имитация выполнения операции
for i in range(100):
    # Обновление значения индикатора выполнения
    progress_bar.progress(i + 1)
    # Пауза для имитации длительности операции
    time.sleep(0.1)

В этом примере создается индикатор выполнения, а затем циклом обновляется его значение от 0 до 100 с интервалом в 0.1 секунды. Это создает эффект прогресса, который можно увидеть в пользовательском интерфейсе.
Аргументы st.progress:

    value (float): Начальное значение индикатора выполнения. По умолчанию 0.

Возвращаемое значение:

Функция st.progress возвращает объект индикатора выполнения, который вы можете использовать для обновления его значения.

Этот виджет полезен, когда у вас есть долгие операции или процессы, и вы хотите предоставить пользователю информацию о том, как далеко они продвинулись в выполнении задачи. Например, это может быть загрузка данных, обработка изображений или выполнение алгоритма машинного обучения.



sl.form в Streamlit - это виджет, который позволяет создавать форму для сбора пользовательских данных. Он помогает организовать элементы интерфейса, такие как текстовые поля, кнопки и другие виджеты, в рамках одной формы, обеспечивая более логическое и удобное взаимодействие пользователя с вашим приложением.

Вот пример использования sl.form:

python

import streamlit as st

# Создание формы
with st.form(key='my_form'):
    # Добавление текстового поля для ввода имени
    name = st.text_input(label='Введите ваше имя')

    # Добавление текстового поля для ввода электронной почты
    email = st.text_input(label='Введите вашу электронную почту')

    # Добавление кнопки для отправки формы
    submit_button = st.form_submit_button(label='Отправить')

# Обработка отправки формы
if submit_button:
    st.write('Отправленная форма:')
    st.write('Имя:', name)
    st.write('Email:', email)

В этом примере создается форма с двумя текстовыми полями для ввода имени и электронной почты, а также с кнопкой "Отправить". После нажатия на кнопку "Отправить" отображается содержимое отправленной формы с введенными данными.

sl.form предоставляет удобный способ организации элементов пользовательского интерфейса в виде формы, что делает взаимодействие пользователя с вашим приложением более удобным и понятным.


_-------------------------------

text-align является стилевым свойством CSS, и его значения являются постоянными. В свойстве text-align определяется выравнивание текста внутри блочного элемента. Допустимые значения:

    left: Текст выравнивается по левому краю.
    right: Текст выравнивается по правому краю.
    center: Текст выравнивается по центру.
    justify: Текст выравнивается по обоим краям, чтобы линии текста были выровнены по обеим сторонам.

Каждое из этих значений является фиксированным и определяет, как будет выровнен текст в соответствующем блочном элементе.

---------------------------------


sl.warning() в Streamlit используется для вывода предупреждения пользователю. Этот метод позволяет создавать информационные сообщения, которые обычно используются для предупреждения о потенциальных проблемах или ошибках.

Вот пример использования sl.warning():

python

import streamlit as st

# Вывод предупреждения
st.warning("Это предупреждение! Пожалуйста, обратите внимание.")

Этот код выведет предупреждение на пользовательском интерфейсе Streamlit. Предупреждения имеют особый стиль, который обычно привлекает внимание пользователя к важной информации.
ChatGPT может допускать ошибки. Рекомендуем проверять важную информацию.





sl.success() в Streamlit используется для вывода сообщения об успешном выполнении операции или для отображения положительной информации для пользователя. Этот метод позволяет создавать информационные сообщения, которые обычно используются для подтверждения успешного завершения действия или операции.

Вот пример использования sl.success():

python

import streamlit as st

# Вывод сообщения об успешном выполнении операции
st.success("Операция успешно выполнена!")

Этот код выведет сообщение об успешном выполнении операции на пользовательском интерфейсе Streamlit. Сообщения об успешном выполнении обычно имеют зеленый цвет и служат для информирования пользователя о том, что действие завершилось успешно.





sl.sidebar в Streamlit используется для создания боковой панели (sidebar), которая предоставляет пользователю возможность взаимодействовать с вашим приложением, не отвлекаясь от основного контента.

Боковая панель часто используется для размещения элементов управления, таких как переключатели, слайдеры, выпадающие списки и другие виджеты, которые позволяют пользователю настраивать параметры или фильтровать данные.

Пример использования sl.sidebar:

python

import streamlit as st

# Создание переключателя в боковой панели
with st.sidebar:
    st.title('Боковая панель')
    checkbox = st.checkbox('Показать подробную информацию')

# Отображение данных в основном контенте в зависимости от значения переключателя
if checkbox:
    st.write('Подробная информация: ...')
else:
    st.write('Обычная информация: ...')

В этом примере st.sidebar используется для размещения переключателя в боковой панели. Затем, в зависимости от состояния этого переключателя, отображается соответствующая информация в основном контенте.




